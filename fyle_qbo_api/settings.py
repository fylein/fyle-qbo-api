"""
Django settings for fyle_qbo_api project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import sys
from logging.config import dictConfig

import dj_database_url

from fyle_qbo_api.sentry import Sentry

from .logging_middleware import WorkerIDFilter

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get('DEBUG') == 'True' else False

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Installed Apps
    'rest_framework',
    'corsheaders',
    'fyle_rest_auth',
    'fyle_accounting_mappings',
    'fyle_integrations_imports',
    'django_q',
    'django_filters',
    # User Created Apps
    'apps.users',
    'apps.workspaces',
    'apps.mappings',
    'apps.fyle',
    'apps.quickbooks_online',
    'apps.tasks',
]

MIDDLEWARE = [
    'request_logging.middleware.LoggingMiddleware',
    'fyle_qbo_api.logging_middleware.ErrorHandlerMiddleware',
    'fyle_qbo_api.logging_middleware.LogPostRequestMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fyle_qbo_api.urls'
APPEND_SLASH = False

AUTH_USER_MODEL = 'users.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']},
    }
]

FYLE_REST_AUTH_SERIALIZERS = {'USER_DETAILS_SERIALIZER': 'apps.users.serializers.UserSerializer'}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated', 'apps.workspaces.permissions.WorkspacePermissions'),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': ('fyle_rest_auth.authentication.FyleJWTAuthentication',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
}

WSGI_APPLICATION = 'fyle_qbo_api.wsgi.application'

FYLE_REST_AUTH_SETTINGS = {'async_update_user': True}

SERVICE_NAME = os.environ.get('SERVICE_NAME')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '{levelname} %s {asctime} {name} {worker_id} {message}' % SERVICE_NAME, 'style': '{'
        },
        'verbose': {
            'format': '{levelname} %s {asctime} {module} {message} ' % SERVICE_NAME, 'style': '{'
        },
        'requests': {
            'format': 'request {levelname} %s {asctime} {message}' % SERVICE_NAME, 'style': '{'
        }
    },
    'filters': {
        'worker_id': {
            '()': WorkerIDFilter,
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
            'filters': ['worker_id'],
        },
        'request_logs': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'requests'
        },
        'debug_logs': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        }
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'qbosdk.apis.api_base': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True
        },
        'django.request': {'handlers': ['request_logs'], 'propagate': False},
    },
}

dictConfig(LOGGING)

Q_CLUSTER = {
    'name': 'fyle_quickbooks_api',
    # The number of tasks will be stored in django q tasks
    "save_limit": 100000,
    'workers': 4,
    # How many tasks are kept in memory by a single cluster.
    # Helps balance the workload and the memory overhead of each individual cluster
    'queue_limit': 10,
    'cached': False,
    'orm': 'default',
    'ack_failures': True,
    'poll': 5,
    'retry': 14400,
    # 15 mins
    'timeout': 900,
    'catch_up': False,
    # The number of tasks a worker will process before recycling.
    # Useful to release memory resources on a regular basis.
    'recycle': os.environ.get('DJANGO_Q_RECYCLE', 50),
    # The maximum resident set size in kilobytes before a worker will recycle and release resources.
    # Useful for limiting memory usage.
    'max_rss': 100000,  # 100mb
    'ALT_CLUSTERS': {
        'import': {
            'retry': 14400,
            # 15 mins
            'timeout': 900,
        },
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {'default': dj_database_url.config()}

DATABASES['default']['DISABLE_SERVER_SIDE_CURSORS'] = True

CACHES = {'default': {'BACKEND': 'django.core.cache.backends.db.DatabaseCache', 'LOCATION': 'auth_cache'}}

DATABASES['cache_db'] = {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'cache.db'}

DATABASE_ROUTERS = ['fyle_qbo_api.cache_router.CacheRouter']

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Branding
BRAND_ID = os.environ.get('BRAND_ID')

# Fyle Settings
API_URL = os.environ.get('API_URL')
FYLE_TOKEN_URI = os.environ.get('FYLE_TOKEN_URI')
FYLE_CLIENT_ID = os.environ.get('FYLE_CLIENT_ID')
FYLE_CLIENT_SECRET = os.environ.get('FYLE_CLIENT_SECRET')
FYLE_BASE_URL = os.environ.get('FYLE_BASE_URL')
FYLE_EXPENSE_URL = os.environ.get('FYLE_APP_URL')

QBO_INTEGRATION_APP_URL = os.environ.get('QBO_INTEGRATION_APP_URL')
QBO_APP_URL = os.environ.get('QBO_APP_URL')
INTEGRATIONS_APP_URL = os.environ.get('INTEGRATIONS_APP_URL')


# QBO Settings
QBO_CLIENT_ID = os.environ.get('QBO_CLIENT_ID')
QBO_CLIENT_SECRET = os.environ.get('QBO_CLIENT_SECRET')
QBO_REDIRECT_URI = os.environ.get('QBO_REDIRECT_URI')
QBO_TOKEN_URI = os.environ.get('QBO_TOKEN_URI')
QBO_ENVIRONMENT = os.environ.get('QBO_ENVIRONMENT')
ENCRYPTION_KEY = os.environ.get('ENCRYPTION_KEY')
E2E_TESTS_CLIENT_SECRET = os.environ.get('E2E_TESTS_CLIENT_SECRET')
E2E_TESTS_REALM_ID = os.environ.get('E2E_TESTS_REALM_ID')
INTEGRATIONS_SETTINGS_API = os.environ.get('INTEGRATIONS_SETTINGS_API')

# Cache Settings
SENDGRID_SANDBOX_MODE_IN_DEBUG = False

SENDGRID_API_KEY = os.environ.get('SENDGRID_KEY')
EMAIL = os.environ.get('SENDGRID_EMAIL')
EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'

CACHE_EXPIRY = 3600

CORS_ORIGIN_ALLOW_ALL = True

# Sentry
Sentry.init()

CORS_ALLOW_HEADERS = ['sentry-trace', 'authorization', 'content-type']
