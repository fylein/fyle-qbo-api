name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pytest:
    runs-on: ubuntu-latest
    environment: CI Environment
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.1
      - name: Run Trivy Scan
        id: trivy
        run: |
          # Run Trivy scan for all vulnerabilities
          if ! /usr/local/bin/trivy fs --scanners vuln --format json . > trivy-results.json; then
            echo "Trivy scan failed"
            exit 1
          fi

          # Check if the file exists and is not empty
          if [ ! -s trivy-results.json ]; then
            echo "No vulnerabilities found"
            echo "{\"vulnerabilities\": []}" > formatted-results.json
            exit 0
          fi

          # Check for vulnerabilities and create formatted output
          if ! jq -r '
            {
              vulnerabilities: [
                (.Results // [])[] |
                select(.Vulnerabilities) |
                .Vulnerabilities[] | {
                  package: .PkgName,
                  severity: .Severity,
                  vulnerability_id: .VulnerabilityID,
                  installed_version: .InstalledVersion,
                  fixed_version: .FixedVersion,
                  title: .Title,
                  description: .Description,
                  path: .Target
                }
              ]
            }
          ' trivy-results.json > formatted-results.json; then
            echo "Error processing scan results"
            echo "{\"vulnerabilities\": []}" > formatted-results.json
            exit 0
          fi

          # Set environment variables for next steps
          TOTAL_COUNT=$(jq '.vulnerabilities | length' formatted-results.json)
          HIGH_CRIT_COUNT=$(jq '[.vulnerabilities[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' formatted-results.json)
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
            echo "VULN_COUNT=$TOTAL_COUNT" >> $GITHUB_ENV
          fi
          if [ "$HIGH_CRIT_COUNT" -gt 0 ]; then
            echo "HIGH_CRITICAL_FOUND=true" >> $GITHUB_ENV
            echo "HIGH_CRIT_COUNT=$HIGH_CRIT_COUNT" >> $GITHUB_ENV
          fi
      - name: Post Vulnerabilities as GitHub Comment
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('formatted-results.json', 'utf8'));
            // Create comment header with emoji and count
            let comment = `### 🔍 Security Scan Results\n\n`;
            const highCritCount = process.env.HIGH_CRIT_COUNT || 0;
            if (highCritCount > 0) {
              comment += `⛔️ **Action Required:** ${highCritCount} Critical/High severity vulnerabilities found\n\n`;
            }
            comment += `Found ${process.env.VULN_COUNT} total vulnerabilities\n\n`;
            // Group by severity with collapsible sections
            const severityOrder = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN'];
            const severityEmojis = {
              'CRITICAL': '🔴',
              'HIGH': '🟠',
              'MEDIUM': '🟡',
              'LOW': '🟢',
              'UNKNOWN': '⚪'
            };
            // Group vulnerabilities by severity
            const grouped = {};
            results.vulnerabilities.forEach(vuln => {
              grouped[vuln.severity] = grouped[vuln.severity] || [];
              grouped[vuln.severity].push(vuln);
            });
            // Generate markdown for each severity level
            severityOrder.forEach(severity => {
              if (grouped[severity] && grouped[severity].length > 0) {
                comment += `#### ${severityEmojis[severity]} ${severity} Severity (${grouped[severity].length})\n\n`;
                // Group by package name for better organization
                const byPackage = {};
                grouped[severity].forEach(vuln => {
                  byPackage[vuln.package] = byPackage[vuln.package] || [];
                  byPackage[vuln.package].push(vuln);
                });
                // List vulnerabilities by package
                Object.keys(byPackage).sort().forEach(pkg => {
                  comment += `<details>\n`;
                  comment += `<summary><b>${pkg}</b> (${byPackage[pkg].length} issues)</summary>\n\n`;
                  byPackage[pkg].forEach(vuln => {
                    comment += `- **${vuln.vulnerability_id}**: ${vuln.title}\n`;
                    comment += `  - Current: ${vuln.installed_version} → Fixed: ${vuln.fixed_version || 'No fix available'}\n`;
                    if (vuln.description) {
                      const shortDesc = vuln.description.length > 100 ?
                        vuln.description.substring(0, 100) + '...' :
                        vuln.description;
                      comment += `  - ${shortDesc}\n`;
                    }
                    comment += `\n`;
                  });
                  comment += `</details>\n\n`;
                });
              }
            });
            // Update remediation section
            comment += `### Remediation\n`;
            if (process.env.HIGH_CRITICAL_FOUND === 'true') {
              comment += `⚠️ **Action Required:** Critical/High severity vulnerabilities must be fixed before merging\n\n`;
            }
            comment += `- Update vulnerable packages to their fixed versions where available\n`;
            comment += `- Run \`trivy fs --scanners vuln .\` locally to see more details\n`;
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request ? context.payload.pull_request.number : context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      - name: Fail if Critical/High vulnerabilities found
        if: env.HIGH_CRITICAL_FOUND == 'true'
        run: |
          echo "❌ Security scan failed: ${HIGH_CRIT_COUNT} Critical/High severity vulnerabilities detected"
          echo "Please review the PR comments for details and fix the Critical/High severity issues before merging"
          exit 1

      - name: Bring up Services and test for token health
        run: |
          docker compose -f docker-compose-pipeline.yml build
          docker compose -f docker-compose-pipeline.yml up -d
          docker compose -f docker-compose-pipeline.yml exec -T api pytest tests/ --cov --cov-report=xml --cov-fail-under=93 --junit-xml=test-reports/report.xml
          echo "STATUS=$(cat pytest-coverage.txt | grep 'Required test' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "FAILED=$(cat test-reports/report.xml | awk -F'=' '{print $5}' | awk -F' ' '{gsub(/"/, "", $1); print $1}')" >> $GITHUB_ENV
        env:
          FYLE_BASE_URL: ${{ secrets.FYLE_BASE_URL }}
          FYLE_CLIENT_ID: ${{ secrets.FYLE_CLIENT_ID }}
          FYLE_CLIENT_SECRET: ${{ secrets.FYLE_CLIENT_SECRET }}
          FYLE_REFRESH_TOKEN: ${{ secrets.FYLE_REFRESH_TOKEN }}
          FYLE_TOKEN_URI: ${{ secrets.FYLE_TOKEN_URI }}
          FYLE_SERVER_URL: ${{ secrets.FYLE_SERVER_URL }}
          QBO_CLIENT_ID: ${{ secrets.QBO_CLIENT_ID }}
          QBO_CLIENT_SECRET: ${{ secrets.QBO_CLIENT_SECRET }}
          QBO_REDIRECT_URI: ${{ secrets.QBO_REDIRECT_URI }}
          QBO_TOKEN_URI: ${{ secrets.QBO_TOKEN_URI }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          E2E_TESTS_CLIENT_SECRET: ${{ secrets.E2E_TESTS_CLIENT_SECRET }}
          E2E_TESTS_REALM_ID: ${{ secrets.E2E_TESTS_REALM_ID }}

      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        with:
          create-new-comment: true
          junitxml-path: ./test-reports/report.xml

      - name: Evaluate Coverage
        if: ${{ (env.STATUS == 'FAIL') || (env.FAILED > 0) }}
        run: exit 1
