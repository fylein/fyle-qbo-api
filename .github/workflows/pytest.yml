name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pytest:
    runs-on: ubuntu-latest
    environment: CI Environment
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.1

      - name: Run Trivy Scan
        id: trivy
        run: |
          if ! /usr/local/bin/trivy fs --scanners vuln --format json . > trivy-results.json; then
            echo "Trivy scan failed"
            exit 1
          fi

          # Create formatted output with specific fields
          jq -r '
            {
              vulnerabilities: [
                .Results[] | select(.Vulnerabilities) | .Vulnerabilities[] | {
                  path: .Target,
                  package: .PkgName,
                  severity: .Severity,
                  vulnerability_id: .VulnerabilityID,
                  installed_version: .InstalledVersion,
                  fixed_version: .FixedVersion,
                  title: .Title,
                  description: .Description
                }
              ]
            }
          ' trivy-results.json > formatted-results.json

          # Check if we found any vulnerabilities
          if [ -s formatted-results.json ] && [ "$(jq '.vulnerabilities | length' formatted-results.json)" -gt 0 ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
            # Store the count for the error message
            echo "VULN_COUNT=$(jq '.vulnerabilities | length' formatted-results.json)" >> $GITHUB_ENV
          fi

      - name: Post Vulnerabilities as GitHub Comment
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('formatted-results.json', 'utf8'));

            let comment = '### 🚨 Trivy Security Scan Found Vulnerabilities\n\n';
            comment += `**Found ${process.env.VULN_COUNT} security vulnerabilities:**\n\n`;

            // Group vulnerabilities by severity
            const severityOrder = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'UNKNOWN'];
            const grouped = results.vulnerabilities.reduce((acc, vuln) => {
              acc[vuln.severity] = acc[vuln.severity] || [];
              acc[vuln.severity].push(vuln);
              return acc;
            }, {});

            severityOrder.forEach(severity => {
              if (grouped[severity]) {
                comment += `#### ${severity} Severity (${grouped[severity].length})\n\n`;
                grouped[severity].forEach(vuln => {
                  comment += `<details>\n`;
                  comment += `<summary><b>${vuln.package}</b>: ${vuln.vulnerability_id} (${vuln.installed_version} → ${vuln.fixed_version || 'No fix'})</summary>\n\n`;
                  comment += `**Title:** ${vuln.title}\n\n`;
                  comment += `**Description:** ${vuln.description}\n\n`;
                  comment += `**Path:** ${vuln.path}\n`;
                  comment += `</details>\n\n`;
                });
              }
            });

            github.rest.issues.createComment({
              issue_number: context.payload.pull_request ? context.payload.pull_request.number : context.payload.after,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if vulnerabilities found
        if: env.VULNERABILITIES_FOUND == 'true'
        run: |
          echo "❌ Security vulnerabilities were found. Please review and fix them before merging."
          exit 1

      - name: Bring up Services and test for token health
        run: |
          docker compose -f docker-compose-pipeline.yml build
          docker compose -f docker-compose-pipeline.yml up -d
          docker compose -f docker-compose-pipeline.yml exec -T api pytest tests/ --cov --cov-report=xml --cov-fail-under=93 --junit-xml=test-reports/report.xml
          echo "STATUS=$(cat pytest-coverage.txt | grep 'Required test' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "FAILED=$(cat test-reports/report.xml | awk -F'=' '{print $5}' | awk -F' ' '{gsub(/"/, "", $1); print $1}')" >> $GITHUB_ENV
        env:
          FYLE_BASE_URL: ${{ secrets.FYLE_BASE_URL }}
          FYLE_CLIENT_ID: ${{ secrets.FYLE_CLIENT_ID }}
          FYLE_CLIENT_SECRET: ${{ secrets.FYLE_CLIENT_SECRET }}
          FYLE_REFRESH_TOKEN: ${{ secrets.FYLE_REFRESH_TOKEN }}
          FYLE_TOKEN_URI: ${{ secrets.FYLE_TOKEN_URI }}
          FYLE_SERVER_URL: ${{ secrets.FYLE_SERVER_URL }}
          QBO_CLIENT_ID: ${{ secrets.QBO_CLIENT_ID }}
          QBO_CLIENT_SECRET: ${{ secrets.QBO_CLIENT_SECRET }}
          QBO_REDIRECT_URI: ${{ secrets.QBO_REDIRECT_URI }}
          QBO_TOKEN_URI: ${{ secrets.QBO_TOKEN_URI }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          E2E_TESTS_CLIENT_SECRET: ${{ secrets.E2E_TESTS_CLIENT_SECRET }}
          E2E_TESTS_REALM_ID: ${{ secrets.E2E_TESTS_REALM_ID }}
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        with:
          create-new-comment: true
          junitxml-path: ./test-reports/report.xml
      - name: Evaluate Coverage
        if: ${{ (env.STATUS == 'FAIL') || (env.FAILED > 0) }}
        run: exit 1
