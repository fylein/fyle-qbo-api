name: Continuous Integration

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

env:
  pat_token: ${{ secrets.REPO_ACCESS_TOKEN }}
  secret_name: QBO_TESTS_REFRESH_TOKENS
  secret_body: ""
  QBO_TESTS_REFRESH_TOKENS: ${{ secrets.QBO_TESTS_REFRESH_TOKENS }}

jobs:
  pytest:
    runs-on: ubuntu-latest
    environment: CI Environment
    steps:
      - uses: actions/checkout@v2
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Bring up Services and test for token health
        run: |
          echo "QBO_TESTS_REFRESH_TOKENS=$QBO_TESTS_REFRESH_TOKENS" >> $GITHUB_ENV
          docker-compose -f docker-compose-pipeline.yml build
          docker-compose -f docker-compose-pipeline.yml up -d
          echo $NUM_TOKEN_EXPIRED
          docker-compose -f docker-compose-pipeline.yml exec -T api pytest tests/test_token_health.py
          echo "NUM_TOKEN_EXPIRED=$(cat test_refresh_token.txt)" >> $GITHUB_ENV
          echo "After updation"
          echo $NUM_TOKEN_EXPIRED
        env:
          FYLE_BASE_URL: ${{ secrets.FYLE_BASE_URL }}
          FYLE_CLIENT_ID: ${{ secrets.FYLE_CLIENT_ID }}
          FYLE_CLIENT_SECRET: ${{ secrets.FYLE_CLIENT_SECRET }}
          FYLE_REFRESH_TOKEN: ${{ secrets.FYLE_REFRESH_TOKEN }}
          FYLE_TOKEN_URI: ${{ secrets.FYLE_TOKEN_URI }}
          FYLE_SERVER_URL: ${{ secrets.FYLE_SERVER_URL }}
          QBO_CLIENT_ID: ${{ secrets.QBO_CLIENT_ID }}
          QBO_CLIENT_SECRET: ${{ secrets.QBO_CLIENT_SECRET }}
          QBO_REDIRECT_URI: ${{ secrets.QBO_REDIRECT_URI }}
          QBO_TOKEN_URI: ${{ secrets.QBO_TOKEN_URI }}
          WRITE_TESTS_REFRESH_TOKENS: 'TRUE'
      - name: Checking refresh token health
        if: ${{ env.NUM_TOKEN_EXPIRED > 0 }}
        run: |
          echo $NUM_TOKEN_EXPIRED
          exit 1
      - name: Run Tests
        run: |
          docker-compose -f docker-compose-pipeline.yml exec -T api pytest tests/ --cov=. --junit-xml=test-reports/report.xml --cov-report=term-missing --cov-fail-under=90 | tee pytest-coverage.txt
          echo "STATUS=$(cat pytest-coverage.txt | grep 'Required test' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "FAILED=$(cat test-reports/report.xml | awk -F'=' '{print $5}' | awk -F' ' '{gsub(/"/, "", $1); print $1}')" >> $GITHUB_ENV
          echo "secret_body=$(cat test_refresh_token.txt)" >> $GITHUB_ENV
          echo $secret_body
      - name: echo secret_body
        if: ${{ (env.secret_body) == (env.QBO_TESTS_REFRESH_TOKENS) }}
        run: |
          env
          echo "same QBO_TESTS_REFRESH_TOKENS"
      - name: gh auth login
        shell: bash
        run: gh auth login --with-token <<< $pat_token
      - name: gh update refresh token
        shell: bash
        run: |
          echo "before updating"
          echo ${{ secrets.QBO_TESTS_REFRESH_TOKENS }} | sed 's/./& /g'
          repository='${{ github.repository }}'
          gh secret set "$secret_name" --body "$secret_body" --repo $repository
          echo "after updating"
          echo ${{ secrets.QBO_TESTS_REFRESH_TOKENS }} | sed 's/./& /g'
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        with:
          create-new-comment: true
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./test-reports/report.xml
      - name: Stop Services
        run: docker compose -f docker-compose-pipeline.yml down
      - name: Evaluate Coverage
        if: ${{ (env.STATUS == 'FAIL') || (env.FAILED > 0) }}
        run: exit 1
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: pytest job status - ${{ job.status }}
          SLACK_TITLE: Pytest Run Stats
          SLACK_ICON_EMOJI: ":terminator:"
          SLACK_USERNAME: Gandalf
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_FOOTER: ''
