name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pytest:
    runs-on: ubuntu-latest
    environment: CI Environment
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.1

      - name: Run Trivy Scan
        id: trivy
        continue-on-error: true
        run: |
          /usr/local/bin/trivy fs --scanners vuln --format json . > trivy-results.json
          # Create a default empty result if the scan fails or is empty
          echo '{"Results": []}' > formatted-results.json
          # Only try to process if trivy-results.json exists and has content
          if [ -s trivy-results.json ]; then
            # Check if the file contains valid JSON with Results array
            if jq -e '.Results' trivy-results.json > /dev/null 2>&1; then
              jq '{Results: [.Results[] | select(.Vulnerabilities != null) | {Target: .Target, Vulnerabilities: .Vulnerabilities}]}' trivy-results.json > formatted-results.json
              # Check if we found any vulnerabilities
              if jq -e '.Results[0]' formatted-results.json > /dev/null 2>&1; then
                echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
              fi
            fi
          fi

      - name: Post Vulnerabilities as GitHub Comment
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('formatted-results.json', 'utf8');
            const comment = `### Trivy Vulnerability Report ⚠️\n\n\`\`\`json\n${results}\n\`\`\``;

            github.rest.issues.createComment({
              issue_number: context.payload.pull_request ? context.payload.pull_request.number : context.payload.after,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Bring up Services and test for token health
        run: |
          docker compose -f docker-compose-pipeline.yml build
          docker compose -f docker-compose-pipeline.yml up -d
          docker compose -f docker-compose-pipeline.yml exec -T api pytest tests/ --cov --cov-report=xml --cov-fail-under=93 --junit-xml=test-reports/report.xml
          echo "STATUS=$(cat pytest-coverage.txt | grep 'Required test' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "FAILED=$(cat test-reports/report.xml | awk -F'=' '{print $5}' | awk -F' ' '{gsub(/"/, "", $1); print $1}')" >> $GITHUB_ENV
        env:
          FYLE_BASE_URL: ${{ secrets.FYLE_BASE_URL }}
          FYLE_CLIENT_ID: ${{ secrets.FYLE_CLIENT_ID }}
          FYLE_CLIENT_SECRET: ${{ secrets.FYLE_CLIENT_SECRET }}
          FYLE_REFRESH_TOKEN: ${{ secrets.FYLE_REFRESH_TOKEN }}
          FYLE_TOKEN_URI: ${{ secrets.FYLE_TOKEN_URI }}
          FYLE_SERVER_URL: ${{ secrets.FYLE_SERVER_URL }}
          QBO_CLIENT_ID: ${{ secrets.QBO_CLIENT_ID }}
          QBO_CLIENT_SECRET: ${{ secrets.QBO_CLIENT_SECRET }}
          QBO_REDIRECT_URI: ${{ secrets.QBO_REDIRECT_URI }}
          QBO_TOKEN_URI: ${{ secrets.QBO_TOKEN_URI }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          E2E_TESTS_CLIENT_SECRET: ${{ secrets.E2E_TESTS_CLIENT_SECRET }}
          E2E_TESTS_REALM_ID: ${{ secrets.E2E_TESTS_REALM_ID }}
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        with:
          create-new-comment: true
          junitxml-path: ./test-reports/report.xml
      - name: Evaluate Coverage
        if: ${{ (env.STATUS == 'FAIL') || (env.FAILED > 0) }}
        run: exit 1
